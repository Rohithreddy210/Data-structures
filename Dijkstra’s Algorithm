#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_VERTICES 100

int n;  // number of vertices
int adj[MAX_VERTICES][MAX_VERTICES];  // adjacency matrix
int dist[MAX_VERTICES];  // distances from the source vertex
int visited[MAX_VERTICES];  // flag to track visited vertices

int getMinVertex(int dist[], int visited[]) {
  int i;
  int min = INT_MAX;
  int minIndex = -1;
  for (i = 0; i < n; i++) {
    if (!visited[i] && dist[i] <= min) {
      min = dist[i];
      minIndex = i;
    }
  }
  return minIndex;
}

void dijkstra(int src) {
  int i, j;
  for (i = 0; i < n; i++) {
    dist[i] = INT_MAX;
    visited[i] = 0;
  }
  dist[src] = 0;
  for (i = 0; i < n - 1; i++) {
    int u = getMinVertex(dist, visited);
    visited[u] = 1;
    for (j = 0; j < n; j++) {
      if (!visited[j] && adj[u][j] && dist[u] + adj[u][j] < dist[j]) {
        dist[j] = dist[u] + adj[u][j];
      }
    }
  }
}

int main() {
  int i, j, src;

  // read the number of vertices
  printf("Enter the number of vertices: ");
  scanf("%d", &n);

  // read the adjacency matrix
  printf("Enter the adjacency matrix:\n");
  for (i = 0; i < n; i++) {
    for (j = 0; j < n; j++) {
      scanf("%d", &adj[i][j]);
    }
  }

  // read the source vertex
  printf("Enter the source vertex: ");
  scanf("%d", &src);

  // call dijkstra function
  dijkstra(src);

  // print the shortest distances from the source vertex
  printf("The shortest distances from the source vertex:\n");
  for (i = 0; i < n; i++) {
    printf("%d\t%d\n", i, dist[i]);
  }

  return 0;
}

OUTPUT

Enter the number of vertices: 2
Enter the adjacency matrix:
1 0
1 1
Enter the source vertex: 10
The shortest distances from the source vertex:
0       -2147483648
1       2147483647
